// src/app/core/services/notification-mock.service.ts
import { Injectable, inject } from '@angular/core';
import { timer, interval } from 'rxjs';
import { UnifiedNotificationService } from './unified-notification.service';

/**
 * Servicio para simular notificaciones push en desarrollo
 */
@Injectable({
  providedIn: 'root'
})
export class NotificationMockService {
  private notificationService = inject(UnifiedNotificationService);

  private mockNotifications = [
    {
      type: 'chat_message',
      title: 'Mar√≠a Garc√≠a',
      body: '¬°Perfecto! Te veo en la plaza en 5 minutos üëç',
      channelId: 'user-maria'
    },
    {
      type: 'plaza_available',
      title: 'üÖøÔ∏è Plaza libre cerca',
      body: 'Nueva plaza disponible en Calle Gran V√≠a (a 200m)',
      plazaId: 'plaza-123'
    },
    {
      type: 'plaza_claimed',
      title: '‚è∞ Plaza reclamada',
      body: 'Carlos L√≥pez va hacia tu plaza. ¬°Coord√≠nate!',
      plazaId: 'plaza-456',
      channelId: 'plaza-456'
    },
    {
      type: 'plaza_confirmed',
      title: '‚úÖ ¬°√âxito!',
      body: 'Plaza ocupada correctamente. +10 puntos',
      successful: true,
      points: 10
    }
  ];

  /**
   * Iniciar simulaci√≥n de notificaciones aleatorias
   */
  startMockNotifications(): void {
    console.log('üöÄ Iniciando simulaci√≥n de notificaciones push...');

    // Enviar primera notificaci√≥n despu√©s de 5 segundos
    timer(5000).subscribe(() => {
      this.sendRandomNotification();
    });

    // Luego enviar notificaciones cada 30-60 segundos
    interval(45000).subscribe(() => {
      if (Math.random() > 0.3) { // 70% de probabilidad
        this.sendRandomNotification();
      }
    });
  }

  private sendRandomNotification(): void {
    const mock = this.mockNotifications[
      Math.floor(Math.random() * this.mockNotifications.length)
    ];

    switch (mock.type) {
      case 'chat_message':
        this.notificationService.sendChatNotification(
          mock.title,
          mock.body,
          mock.channelId!
        );
        break;

      case 'plaza_available':
        this.notificationService.sendPlazaAvailableNotification(
          'Gran V√≠a, Madrid',
          Math.floor(Math.random() * 500) + 100,
          mock.plazaId!
        );
        break;

      case 'plaza_claimed':
        this.notificationService.sendPlazaClaimedNotification(
          'Carlos L√≥pez',
          mock.plazaId!,
          mock.channelId!
        );
        break;

      case 'plaza_confirmed':
        this.notificationService.sendPlazaConfirmedNotification(
          mock.successful!,
          mock.points
        );
        break;
    }
  }

  /**
   * Enviar notificaci√≥n de prueba espec√≠fica
   */
  sendTestNotification(type: string): void {
    const mock = this.mockNotifications.find(n => n.type === type);
    if (mock) {
      console.log(`Enviando notificaci√≥n de prueba: ${type}`);
      // L√≥gica similar al m√©todo anterior
    }
  }
}
